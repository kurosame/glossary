version: 2.1

orbs:
  node: circleci/node@4.7.0
  slack: circleci/slack@4.8.3

parameters:
  run-schedule:
    type: boolean
    default: false

jobs:
  deploy:
    executor:
      name: node/default
      tag: '16.13.0'
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Build
          command: npm run build:production
      - run:
          name: Deploy
          # Firebase will automatically use the environment variable FIREBASE_TOKEN
          command: ./node_modules/.bin/firebase deploy --only hosting --project $FIREBASE_PROJECT
  deploy-functions:
    executor:
      name: node/default
      tag: '16.13.0'
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - node/install-packages:
          app-dir: ./functions
      - run:
          name: Build
          working_directory: ./functions
          command: npm run build
      - run:
          name: Deploy
          working_directory: ./functions
          # Firebase will automatically use the environment variable FIREBASE_TOKEN
          command: ./node_modules/.bin/firebase deploy --only functions --project $FIREBASE_PROJECT
  deploy-raw-data:
    docker:
      - image: google/cloud-sdk:390.0.0
    steps:
      - checkout
      - run:
          name: Deploy to raw-data
          command: |
            echo $GCLOUD_SERVICE_KEY > /tmp/gcloud-service-key.json
            gcloud auth activate-service-account --key-file /tmp/gcloud-service-key.json
            IFS_BEFORE=$IFS
            IFS=$'\n'
            UP_FILES=$(git diff HEAD^ | grep -E '^\+\+\+.+raw-data/.+\.md' | sed -e 's/.*raw-data/\.\/raw-data/' || true)
            if [ -z "$UP_FILES" ]; then
              exit 0
            fi
            for FILE in $UP_FILES; do
              echo $FILE | gsutil cp -I gs://glossary-kurosame.appspot.com/raw-data
            done
            IFS=$IFS_BEFORE
  test:
    executor:
      name: node/default
      tag: '16.13.0'
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Test for CI
          command: npm run test:ci
      - store_artifacts:
          path: ./test/unit/coverage
  test-functions:
    executor:
      name: node/default
      tag: '16.13.0'
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - node/install-packages:
          app-dir: ./functions
      - run:
          name: Test for CI
          working_directory: ./functions
          command: npm run test:ci
      - store_artifacts:
          path: ./functions/test/unit/coverage
  lighthouse:
    executor:
      name: node/default
      tag: '16.13.0'
    docker:
      - image: circleci/node:16.13.1-browsers
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Lighthouse
          command: ./node_modules/.bin/lighthouse --chrome-flags="--headless --no-sandbox" --output-path=./lighthouse-results.html $GLOSSARY_APP_URL
      - store_artifacts:
          path: ./lighthouse-results.html
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "glossary's Lighthouse"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Open in browser"
                      },
                      "url": "https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/lighthouse-results.html"
                    }
                  ]
                }
              ]
            }

workflows:
  deploy:
    when:
      not: << pipeline.parameters.run-schedule >>
    jobs:
      - deploy:
          filters:
            branches:
              only: master
      - deploy-functions:
          filters:
            branches:
              only: master
      - deploy-raw-data:
          filters:
            branches:
              only: master
  test:
    when:
      not: << pipeline.parameters.run-schedule >>
    jobs:
      - test
      - test-functions
  nightly:
    when: << pipeline.parameters.run-schedule >>
    jobs:
      - lighthouse
